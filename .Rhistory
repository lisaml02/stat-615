summarize(across(where(is.numeric),
.fns = median),
groups = "drop")
starwars %>%
summarize(across(where(is.numeric),
.fns = median),
.groups = "drop")
starwars %>%
summarize(across(where(is.numeric),
.fns = median, na.rm = TRUE),
.groups = "drop")
starwars %>%
group_by(eye_color) %>%
summarize(across(where(is.numeric),
.fns = median, na.rm = TRUE),
.groups = "drop")
starwars %>%
group_by(eye_color, species) %>%
summarize(across(where(is.numeric),
.fns = median, na.rm = TRUE),
.groups = "drop")
starwars %>%
group_by(eye_color, species) %>% # starts with eye color, then performs the function based on species too
summarize(across(where(is.numeric),
.fns = list(mean,median), na.rm = TRUE),
.groups = "drop")
starwars %>%
summarize(across(where(is.numeric),
.fns = list(mean, median), na.rm = TRUE)
.groups = "drop")
starwars %>%
summarize(across(where(is.numeric),
.fns = list(mean, median), na.rm = TRUE),
.groups = "drop")
starwars %>%
summarise(across(where(is.numeric),
~ median(.x,na.rm = TRUE)),
.groups = "drop")
# summarize all rows
starwars %>%
summarise(across(where(is.character),
~ length(unique(.x)))) # summarizes across character columns and give me the levels (values) for each column. ie. for column eyecolor, there are 15 levels like blue, black, etc
starwars %>%
group_by(species) %>%
filter(n() > 1) %>% # each group that has more than 1 number of rows/observations
summarise(across(c(sex, gender, homeworld), # summarize across these columns
~ length(unique(.x))), # find number of levels
n=n()) # creating a new a column with number of rows
starwars %>%
group_by(homeworld) %>%
filter(n() > 1) %>% # only take groups that have more than one observation
summarise(across(where(is.numeric), # summarizes across numeric vectors only
~ max(.x, na.rm = TRUE)))   # computes the maximum
min_max <- list(
min = ~min(.x, na.rm = TRUE),
max = ~max(.x, na.rm = TRUE)
)
starwars %>% summarise(across(where(is.numeric), min_max))
# Create a rescale function
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE) # range takes the min and max of a vector
(x - rng[1]) / (rng[2] - rng[1])
}
# Create a sample tibble
df <- tibble(x = 1:4, y = rnorm(4))
df
# this goes beyond just mean and median
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyverse")
library(tidyverse)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
install.packages("nycflights13")
library(nycflights13)
flights %>%
mutate(total = sum(c_across(where(is.numeric))))
library(dplyr)
flights %>%
rowwise() %>%
mutate(total = sum(c_across(where(is.numeric))))
flights %>%
slice(1:100) %>%
rowwise() %>% # makes the code run much slower
mutate(total = sum(c_across(where(is.numeric))))
flights %>%
mutate(total = rowSums(where(is.numeric)))
flights %>%
mutate(total = rowSums(across(where(is.numeric))))
mpg %>%
summarise(across(cty, mean))
install.packages("mpg")
data(mpg)
library(mpg)
install.packages("ggplot2")
library(ggplot2)
data(mpg)
mpg %>%
summarise(across(cty, mean))
mpg %>%
summarise(across(cty, hwy, mean))
mpg %>%
summarise(across(c(cty, hwy) mean))
mpg %>%
summarise(across(c(cty, hwy), mean))
mpg %>%
summarise(across(c(cty, hwy), list(mean,sd))
mpg %>%
summarise(across(c(cty, hwy), list(mean,sd)))
mpg %>%
group_by(class) %>%
summarise(across(c(cty, hwy), list(mean,sd))) # creates two new columns with the mean and sd of columns cty and hwy
flights %>%
filter(busy_day <- mean(dep_delay) + sd(arr_delay))
flights %>%
filter(origin = "EWR") %>%
group_by(day) %>%
flights %>%
filter(origin = "EWR") %>%
group_by(day)
flights %>%
filter(origin == "EWR") %>%
group_by(day)
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
summarise(
across(
c(dep_delay, arr_delay),
.fns = list(
"busy day" = mean(dep_delay) + sd(arr_delay)
)
)
)
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(dep_delay, list("busy_day" = ~ mean(.x) + sd(.x))))
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ mean(.x) + sd(.x))))
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ mean(.x) + sd(.x)))))
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ mean(.x) + sd(.x)))).names = {.fn}, {.col})
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ mean(.x) + sd(.x))))
.names = {.fn}, {.col})
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ (mean(.x) + sd(.x)))
.names = "{.fn}, {.col}")
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ (mean(.x) + sd(.x))))
.names = "{.fn}, {.col}")
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ (mean(.x) + sd(.x)))),
.names = "{.fn}, {.col}")
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ (mean(.x) + sd(.x))))
"{.fn}, {.col}")
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ (mean(.x) + sd(.x)))
"{.fn}, {.col}")
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ (mean(.x) + sd(.x)), "{.fn} {.col}"))
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
summarise(across(
dep_delay, .fns = list("busy_day" = ~ (mean(.x) + sd(.x)), "{.fn} {.col}"))
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
summarise(across(
dep_delay, .fns = list("busy_day" = ~ (mean(.x) + sd(.x))))
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
summarise(across(
dep_delay, .fns = list("busy_day" = ~ mean(.x) + sd(.x))))
flights %>%
filter(origin == "EWR", !is.na(dep_delay)) %>%
group_by(day) %>%
summarise(across(
dep_delay, .fns = list("busy_day" = ~ mean(.x) + sd(.x))))
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(orign,day) %>%
summarise(across(
dep_delay, .fns = list("busy_day" = ~ mean(.x) + sd(.x))))
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(origin,day) %>%
summarise(across(
dep_delay, .fns = list("busy_day" = ~ mean(.x) + sd(.x))))
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(origin,day) %>%
summarise(across(
dep_delay, .fns = list("busy_day" = ~ mean(.x) + sd(.x)))) %>%
ungroup() %>%
ggplot(aes(day, dep_delay_busy_day, color = origin)) +
geom_line(size = 1)
install.packages("tidyverse")
library(tidyverse)
data(mpg)
knitr::opts_chunk$set(echo = TRUE)
pl <- ggplot(mpg, aes(x = hwy, y = cty)) +
geom_point()
# default path
ggsave(filename = "my_saved_plot_default_path.pdf", plot = pl)
# because we haven't specified any paths, the picture that we're saving is going to be saved where the qmd file is
pl <- ggplot(mpg, aes(x = hwy, y = cty)) +
geom_point()
# default path
ggsave(filename = "../pics/my_saved_plot_default_path.pdf", plot = pl)
pl <- ggplot(mpg, aes(x = hwy, y = cty)) +
geom_point()
# default path
ggsave(filename = "../pics/Data_612/my_saved_plot_default_path.pdf", plot = pl)
pl <- ggplot(mpg, aes(x = hwy, y = cty)) +
geom_point()
# default path
ggsave(filename = "../pics/Data_612/my_saved_plot_default_path.pdf", plot = pl)
pl <- ggplot(mpg, aes(x = hwy, y = cty)) +
geom_point()
# default path
ggsave(filename = "./pics/my_saved_plot_default_path.pdf", plot = pl)
pl <- ggplot(mpg, aes(x = hwy, y = cty)) +
geom_point()
# default path
ggsave(filename = "my_saved_plot_default_path.pdf", plot = pl)
# because we haven't specified any paths, the picture that we're saving is going to be saved where the qmd file is
# read_lines("address", n_max = 10) --> means read these first ten lines and see what kind of file you have
read_lines("../Data/viodata.csv")
setwd("~/Desktop/grad_school/spring_2024/stat-615")
library(tidyverse)
cdi <- read_csv(file = "./week_1/cdi.csv")
cdi
mtcars <-data("mtcars")
mtcars
mtcars
data("mtcars")
mtcars
mtcars <- mtcars %>%
mutate(kpg = kpg = mpg * 1.61)
mtcars <- mtcars %>%
mutate(kpg = mpg * 1.61)
mtcars
mtcars
mtcars <- rename(mtcars, is_manual = am)
mtcars
mtcars %>%
filter(is_manual == 1)
filter(mtcars, is_manual == 1)
mtsub <- mtcars %>%
filter(is_manual == 1)
glimpse(mtsub)
source("~/Desktop/grad_school/spring_2024/stat-615/week_1/r_review_notes.R")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
options(repos = c(CRAN = mirror_url))
knitr::opts_chunk$set(echo = TRUE)
options(repos = c(CRAN = mirror_url))
knitr::opts_chunk$set(echo = TRUE)
options(repos = c(CRAN = "https://cloud.r-project.org/"))
library(ggplot2)
library(ggplot2)
library(dplyr)
# ctrl alt I is insert code chunk
knitr::opts_chunk$set(echo = TRUE)
# options(repos = c(CRAN = "https://cloud.r-project.org/")) only need this if installing packages
data(mpg, package = "ggplot2")
glimpse(mpg)
ggplot(data = mpg, mapping = aes(x = hwy, color = drv))
ggplot(data = mpg, mapping = aes(x = hwy, color = drv)) +
geom_histogram()
# one variable; continuous
ggplot(data = mpg, mapping = aes(x = hwy, color = drv)) +
geom_histogram()
ggplot(data = mpg, mapping = aes(x = hwy)) +
geom_histogram(bins = 10, color = "black", fill = "white")
estate <- read_csv(file = "./week_1/estate.csv")
ggplot(estate, mapping = aes(x = price)) +
geom_histogram(bins = 20, color = "black", fill = "red")
# discrete
ggplot(data = mpg, mapping = aes(x = drv)) +
geom_bar()
ggplot(estate, mapping = aes(x = bed)) +
geom_bar()
ggplot(estate, mapping = aes(x = bath)) +
geom_bar()
ggplot(estate, mapping = aes(x = garage)) +
geom_bar()
# continuous x and y
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()
# continuous x and y
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_jitter()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(estate, mapping = aes(x = bed, y = bath)) +
geom_jitter()
# discrete X, continuous Y
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
estate <- estate %>%
mutate(as.factor(style))
View(estate)
estate <- estate %>%
mutate(style = as.factor(style))
estate <- read_csv(file = "./week_1/estate.csv")
View(estate)
estate <- estate %>%
mutate(style = as.factor(style))
ggplot(estate, mapping = aes(x = style, y = price)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy, color = drv)) +
geom_jitter()
ggplot(estate, mapping = aes(x = ac, y = price. color = pool)) +
ggplot(estate, mapping = aes(x = ac, y = price, color = pool)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy, color = drv)) +
geom_jitter() +
scale_color_discrete(name = "New Name1")
ggplot(data = mpg, mapping = aes(x = cty, y = hwy, shape = drv)) +
geom_jitter() +
scale_shape_discrete(name = "New Name2")
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
facet_grid(. ~ drv)
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
facet_grid(drv ~ .)
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
facet_grid(fl ~ drv)
ggplot(estate, mapping = aes(x = price, y = area, color = pool)) +
geom_point() +
facet_grid(~ ac)
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
theme_classic()
knitr::opts_chunk$set(echo = TRUE)
cdi <- read_csv(file = "./week_1/cdi.csv")
glipmse(cdi)
library(tidyverse)
glipmse(cdi)
library(tidyverse)
library(dplyr)
glipmse(cdi)
glimpse(cdi)
cdi %>%
summarise(mean = sum(pop),
sd = sd(pop))
cdi <- cdi %>%
mutate(pop = pop/100000)
cdi
ggplot(cdi, mapping = aes(x = pop, y = physicians)) +
geom_point()
ggplot(cdi, mapping = aes(x = physicians, y = pop)) +
geom_point()
ggplot(cdi, mapping = aes(x = pop, y = physicians)) +
geom_point()
ggplot(cdi, mapping = aes(x = region, y = pop)) +
geom_boxplot()
ggplot(cdi, mapping = aes(x = pop, y = physicians)) +
geom_point() +
facet_grid(~ region)
cdi %>%
group_by(region)
cdi %>%
filter(region == "W")
cdi_w <- cdi %>%
filter(region == "W")
cdi_NC <- cdi %>%
filter(region == "NC")
cdi_S <- cdi %>%
filter(region == "S")
cdi_NE <- cdi %>%
filter(region == "NE")
cdi_w
cdi_NE
cdi_S
cdi_NC
ggplot(cdi, mapping = aes(x = pop, y = physicians)) +
geom_point()
ggplot(cdi, mapping = aes(x = pop, y = log(physicians)) +
geom_point()
ggplot(cdi, mapping = aes(x = pop, y = log(physicians))) +
geom_point()
ggplot(cdi, mapping = aes(x = region, y = pop)) +
geom_boxplot()
ggplot(cdi, mapping = aes(x = region, y = log(pop)) +
geom_boxplot()
ggplot(cdi, mapping = aes(x = region, y = log(pop))) +
geom_boxplot()
ggplot(cdi, mapping = aes(x = pop, y = physicians)) +
geom_point() +
facet_grid(~ region)
ggplot(cdi, mapping = aes(x = pop, y = log(physicians)) +
geom_point() +
facet_grid(~ region)
ggplot(cdi, mapping = aes(x = pop, y = log(physicians)) +
geom_point() +
facet_grid(~ region)
ggplot(cdi, mapping = aes(x = pop, y = log(physicians))) +
geom_point() +
facet_grid(~ region)
cdi %>%
summarise(mean = sum(pop),
sd = sd(pop))
ggplot(cdi, mapping = aes(x = log(pop), y = log(physicians))) +
geom_point()
ggplot(cdi, mapping = aes(x = log(pop), y = log(physicians))) +
geom_point() +
facet_grid(~ region)
knitr::opts_chunk$set(echo = TRUE)
y <- c(16, 5, 10, 15, 13, 22)
y
X <- matrix(c(4, 1, 2, 3, 3, 4), ncol = 1)
betahat = solve(t(X) %*% X) %*% t(X) %*% y
betahat
betahat = solve(t(X) %*% X) %*% t(X) %*% y
betahat
X <- matrix(c(1, 4,
1, 1,
1, 2,
1, 3,
1, 3,
1, 4), ncol = 2, nrow = 6, byrow = TRUE)
X <- matrix(c(1, 4,
1, 1,
1, 2,
1, 3,
1, 3,
1, 4), ncol = 2, nrow = 6, byrow = TRUE)
X
betahat = solve(t(X) %*% X) %*% t(X) %*% y
betahat
y_pred <- X %*% betahat
residuals <- y - y_pred
MSE <- mean(residuals^2)
MSE
cov_matrix <- MSE * solve(t(x) %*% X)
cov_matrix <- MSE * solve(t(X) %*% X)
variances <- diag(cov_matrix)
SE_beta <- sqrt(variances)
SE_beta
lm(y ~ X[, 2])
summary(lm(y ~ X[, 2]))
# Create a data frame with the given data
data <- data.frame(loans = c(4, 1, 2, 3, 3, 4), delinquent = c(16, 5, 10, 15, 13, 22))
# Fit the linear regression model
lm_model <- lm(delinquent ~ loans, data = data)
# Print the coefficients
coefficients(lm_model)
# Print the summary of the model
summary(lm_model)
y_pred <- X %*% betahat
residuals <- y - y_pred
df <- length(y) - ncol(X)
MSE <- mean(residuals^2)
MSE
y_pred <- X %*% betahat
residuals <- y - y_pred
df <- length(y) - ncol(X)
MSE <- sum(residuals^2)/df
MSE
cov_matrix <- MSE * solve(t(X) %*% X)
variances <- diag(cov_matrix)
SE_beta <- sqrt(variances)
SE_beta
summary(lm(y ~ X[, 2]))
A <- matrix(c(1, 3, 5, 2, 4, 6), nrow = 2, byrow = TRUE)
B <- matrix(c(2, -2, 1, -1, 3, -3), nrow = 3, byrow = TRUE)
AB <- A %*% B
AB

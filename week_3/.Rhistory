# because we haven't specified any paths, the picture that we're saving is going to be saved where the qmd file is
pl <- ggplot(mpg, aes(x = hwy, y = cty)) +
geom_point()
# default path
ggsave(filename = "../pics/my_saved_plot_default_path.pdf", plot = pl)
pl <- ggplot(mpg, aes(x = hwy, y = cty)) +
geom_point()
# default path
ggsave(filename = "../pics/Data_612/my_saved_plot_default_path.pdf", plot = pl)
pl <- ggplot(mpg, aes(x = hwy, y = cty)) +
geom_point()
# default path
ggsave(filename = "../pics/Data_612/my_saved_plot_default_path.pdf", plot = pl)
pl <- ggplot(mpg, aes(x = hwy, y = cty)) +
geom_point()
# default path
ggsave(filename = "./pics/my_saved_plot_default_path.pdf", plot = pl)
pl <- ggplot(mpg, aes(x = hwy, y = cty)) +
geom_point()
# default path
ggsave(filename = "my_saved_plot_default_path.pdf", plot = pl)
# because we haven't specified any paths, the picture that we're saving is going to be saved where the qmd file is
# read_lines("address", n_max = 10) --> means read these first ten lines and see what kind of file you have
read_lines("../Data/viodata.csv")
knitr::opts_chunk$set(echo = TRUE)
calculate_z_score <- function(observed_value, mean, standard_deviation) {
z_score <- (observed_value - mean) / standard_deviation
return(z_score)
observed_value <- 25.77
mean_value <- 23.54
std_deviation <- 2.442
z_score_result <- calculate_z_score(observed_value, mean_value, std_deviation)
print(paste("Z-Score:", round(z_score_result, 4)))
calculate_z_score <- function(observed_value, mean, standard_deviation) {
z_score <- (observed_value - mean) / standard_deviation
return(z_score)
observed_value <- 25.77
mean_value <- 23.54
std_deviation <- 2.442
z_score_result <- calculate_z_score(observed_value, mean_value, std_deviation)
print(paste("Z-Score:", round(z_score_result, 4))))
calculate_z_score <- function(observed_value, mean, standard_deviation) {
z_score <- (observed_value - mean) / standard_deviation
return(z_score)
observed_value <- 25.77
mean_value <- 23.54
std_deviation <- 2.442
z_score_result <- calculate_z_score(observed_value, mean_value, std_deviation)
print(paste("Z-Score:", round(z_score_result, 4)))
calculate_z_score <- function(observed_value, mean, standard_deviation) {
z_score <- (observed_value - mean) / standard_deviation
return(z_score)
}
observed_value <- 25.77
mean_value <- 23.54
std_deviation <- 2.442
z_score_result <- calculate_z_score(observed_value, mean_value, std_deviation)
print(paste("Z-Score:", round(z_score_result, 4)))
calculate_log_expression <- function(number, prime_number) {
result <- log(number) * log10(number) / (prime_number^(1/3))
return(result)
}
number_value <- 32
prime_number <- 11
log_expression_result <- calculate_log_expression(number_value, prime_number)
rounded_result <- round(log_expression_result, 1)
print(paste("Result of Logarithmic Expression:", rounded_result))
for (col in colnames(mtcars)) {
if (is.numeric(mtcars[[col]])) {
std_dev <- sd(mtcars[[col]])
print(paste("Standard Deviation for", col, ":", round(std_dev, 2)))
}
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# A function is a structured and sequenced set of commands
# that process input values to produce output values efficiently.
# A function reduces repetitive calculations that often result
# in mistakes, errors, and unneeded work.
# Consider the task of calculating the volume of twenty
# cylinders with the given dimensions:
# Cylinder1  r = 4, h = 6      V = pi(4^2)(6)
# Cylinder2  r = 3, h = 10     V = pi(3^2)(10)
# Cylinder3  r = 2.5, h = 5    V = pi((2.5)^2)(5)
# Cylinder4  r = 12, h = 4     V = pi(12^2)(4)
# Cylinder5  r = 20, h = 14    V = pi(20^2)(16)
#            .
#            .
#            .
# Cylinder20 r = 12.25, h = 9  V = pi(12.25)(9)
# The formula V = pi(r^2)h would have to be applied correctly
# 20 times, if you are to do these manually; one at a time.
# There is certainly a high risk for errors i.e. data entry
# or misuse of the formula for a problem.
# Were any errors committed in the executions above ?
# We now use a function for this problem to reduce repetitive
# calculations and possible errors
# Basic function structure:
# function_name <- function (argument/input variables) {
# statements/expression for calculation/equation
#  }
# Call the function and evaluate
# Example 1 Write a function to find the volume of a cylinder
#  Volume = pi(r^2)h,  pi is approximately 3.14
volume_cylinder <- function(r, h) {
pi*r^2*h
}
volume_cylinder(4, 6)
# this function can now be used for multiple tasks
volume_cylinder(3, 10)
# Now lets produce an answer that is rounded to a specified value
# Example 3
volume_cylinder <- function(r, h) {
V = pi*r^2*h
print(paste("The volume of a cylinder with a radius of 4 and
a height of 6 is",
round(V, digits = 3)))
}
volume_cylinder(4, 6)
# Now lets add a descriptive statement for the output
# Example 2
volume_cylinder <- function(r, h) {
V = pi*r^2*h
print(paste("The volume of a cylinder with a radius of 4 and
a height of 6 is",V))
}
volume_cylinder(4, 6)
# Now lets produce an answer that is rounded to a specified value
# Example 3
volume_cylinder <- function(r, h) {
V = pi*r^2*h
print(paste("The volume of a cylinder with a radius of 4 and
a height of 6 is",
round(V, digits = 3)))
}
volume_cylinder(4, 6)
# Example 4
# function to print x raised to the power y
pow <- function(x, y) {
result <- x^y
print(paste(x,"raised to the power", y, "is", result))
}
pow(8, 2)
pow(2,8)
# Example 5a
# Write a function that will create the first 10 squares of
# positive odd integers. That is your function will give you
# the following output. 1, 9, 25, 49, ., 361 when you input
# values 1 to 10.
# How do you write a positive odd integer?  2*x - 1 ,  where x
# is positive integer
# Method 1
C <- function(x) {
(2*x - 1)^2
}
C(1:10)
# Method 2
C <- function(x) {
(2*x - 1)^2
return((2*x - 1)^2)
}
C(1:10)
# Using our function how could we get results for C2 ?
# The If else statement
#if (condition) {
#  Expr1  (execute expression or command 1)
#} else {
#  Expr2  (execute expression or command 2)
#}
# Example 6
# Set the if-else statement
quantity <- 13  # indicate a quantity to process
if (quantity > 20) {
print('You sold a lot!')
} else {
print('Not enough for today')
}
# Example 7  (Let's write a function that will test for
# divisibility)
# Is 125 divisible by 3?
# Method 1
x<-125
if (x %% 3 == 0) {
print("the number is divisible by 3")
} else {
print("the number is not divisible by 3")
}
# Method 2
FunctionA <- function(x)
if (x %% 3 == 0) {
print("the number is divisible by 3")
} else {
print("the number is not divisible by 3")
}
FunctionA(125)
# more consistent with the coding we've done up to this point
FunctionA(2112)
# Multiple Conditions  / else if
# if
# else if
# else
# Example 8
# Write a function that will give a result for three conditions:
# x > 0, x < 0, and x = 0.
check <- function(x) {
if (x > 0) {
result <- "Positive"
}
else if (x < 0) {
result <- "Negative"
}
else {
result <- "Zero"
}
return(result)
}
check(-3)
check(32)
check(0)
# Example 9
# Create vector quantity
quantity <-  26
# Create multiple condition statement
if (quantity <20) {
print('Not enough for today')
} else if (quantity > 20  & quantity <= 30) {
print('Average day')
} else {
print('What a great day!')
}
# Using for loops
#For (i in vector) {
#   Exp
#   }
# Example 1  (Write a for loop that will cube each integer
#             from 1 to 4 inclusive)
for ( i in 1:4) {
print (i^3)
}
# Using for loops
#For (i in vector) {
#   Exp
#   }
# Example 1  (Write a for loop that will cube each integer
#             from 1 to 4 inclusive)
for ( i in 1:4) { # iterate from 1 to 4
print (i^3) # cube each number
}
# Example 2  values are NOT consecutively ordered
# Write a for loop that will cube the following values
# -2,4,7,-1
for (i in c(-2,4,7,-1)) { # have to define vector
print (i^3)
}
# Example 3
# Changing Kilometers to miles using a for loop
# Write a for loop that will convert km measurements
# of 12,20,45,80,and 110 to miles
for (km in c(12,20,45,80,110)) {
print(c(km, .621371*km))
}
# Consider the following tibble. Use two methods to find
# the median of each column.
df <- tibble(
a = rnorm(50),
b = rnorm(50),
c = rnorm(50),
d = rnorm(50)
)
df
# method 1
median(df$a)
# method 1
median(df$a)
median(df$b)
median(df$c)
median(df$d)
# method 2  The "Special For Loop Method"
output <- vector("double", ncol(df))  # 1. output
for (i in seq_along(df)) {            # 2. sequence
output[[i]] <- median(df[[i]])      # 3. body
}
output
mtcars
mtcars<- mtcars
output2 <- vector("double", ncol(mtcars))
for (i in seq_along(mtcars)) {
output2[[i]] <- mean(mtcars[[i]])
}
output2
diamonds <- diamonds
output3 <- vector("double", ncol(diamonds))  # 1. output
for (i in seq_along(diamonds)) {            # 2. sequence
output3[[i]] <- mean(diamonds[[i]])      # 3. body
}
output3 <- vector("double", ncol(diamonds))  # 1. output
for (i in seq_along(diamonds)) {            # 2. sequence
output3[[i]] <- mean(diamonds[[i]])      # 3. body
}
output3
# iterates along the columns to find the mean of each column
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
sum_logs <- function(num) {
x = log(num) + log10(num) + log(num, base = 2))
sum_logs <- function(num) {
x = log(num) + log10(num) + log(num, base = 2))
sum_logs <- function(num) {
x = log(num) + log10(num) + log(num, base = 2)
return(x)
}
for (i in range(1:5)) {
sum_logs(2*i)
}
sum_logs <- function(num) {
x = log(num) + log10(num) + log(num, base = 2)
return(x)
}
for (i in range(1:5)) {
sum_logs(2*i)
print(2*i)
}
sum_logs <- function(num) {
x = log(num) + log10(num) + log2(num)
return(x)
}
for (i in range(1:5)) {
sum_logs(2*i)
print(2*i)
}
sum_logs <- function(num) {
x = log(num) + log10(num) + log2(num)
return(x)
}
for (i in c(1:5)) {
sum_logs(2*i)
print(2*i)
}
sum_logs <- function(num) {
x = log(num) + log10(num) + log2(num)
return(x)
}
for (i in c(1:5)) {
sum_logs(2*i)
print(sum_logs(2*i))
}
big_number <- function(num) {
if (num^2 >= 100)
result("This is a big number")
else
result("This is not a big number")
}
big_number(5)
big_number <- function(num) {
if (num^2 >= 100)
result <- "This is a big number"
else
result <- "This is not a big number"
}
big_number(5)
big_number <- function(num) {
if (num^2 >= 100)
result <- "This is a big number"
else
result <- "This is not a big number"
print(result)
}
big_number(5)
big_number <- function(num) {
if (num^2 >= 100)
result <- "This is a big number"
else
result <- "This is not a big number"
print(result)
}
big_number(15)
big_number <- function(num) {
if (num^2 >= 100)
result <- "This is a big number"
else
result <- "This is not a big number"
print(result)
}
big_number(15)
big_number(5)
knitr::opts_chunk$set(echo = TRUE)
team_A <- 3
team_B <- 2
if (team_A > team_b){
print("Team A won")
} else if (team_A < team_B){
print("Team B won")
} else {
print("Team A & B tied")
}
team_A <- 3
team_B <- 2
if (team_A > team_B){
print("Team A won")
} else if (team_A < team_B){
print("Team B won")
} else {
print("Team A & B tied")
}
if (x %% 3 == 0 & x %% 5 == 0){
print("divisible by three and five")
} else if (x %% 3 == 0 & x %% 4 == 0){
print("divisible by three and four")
} else {
print("neither")
}
x <- 16
if (x %% 3 == 0 & x %% 5 == 0){
print("divisible by three and five")
} else if (x %% 3 == 0 & x %% 4 == 0){
print("divisible by three and four")
} else {
print("neither")
}
x <- 45
if (x %% 3 == 0 & x %% 5 == 0){
print("divisible by three and five")
} else if (x %% 3 == 0 & x %% 4 == 0){
print("divisible by three and four")
} else {
print("neither")
}
x <- 24
if (x %% 3 == 0 & x %% 5 == 0){
print("divisible by three and five")
} else if (x %% 3 == 0 & x %% 4 == 0){
print("divisible by three and four")
} else {
print("neither")
}
library(tidyverse)
library(tidyverse)
data(mtcars)
library(tidyverse)
data("mtcars")
View(mtcars)
library(tidyverse)
data("mpg")
force(mpg)
mpg <- mpg %>%
select(displ, cyl, cty, hwy)
mpg
output <- vector("double", ncol(mpg))
for (i in seq_along(mpg)){
output[[i]] <- var(mpg[[i]])
}
output
for (i in c(11, 13, 17, 19, 23, 29)){
print((i^3)-(i^2))
}
knitr::opts_chunk$set(echo = TRUE)
divisible_345 <- function(num) {
if (num %% 3 == = & num %% 5 == 0){
divisible_345 <- function(num) {
if (num %% 3 == & num %% 5 == 0){
divisible_345 <- function(num) {
if (num %% 3 == && num %% 5 == 0){
divisible_345 <- function(num) {
if (num %% 3 == 0 && num %% 5 == 0){
print("divisible by three and five")
} else if (num %% 3 == 0 && num %% 4 == 0){
print("divisible by three and four")
} else {
print("neither")
}
}
divisible_345(16)
divisible_345(45)
divisible_345(24)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
uni <- read_csv("../week_3/university.csv")
library(tidyverse)
uni <- read_csv("./week_3/university.csv")
library(tidyverse)
uni <- read_csv("../week_3/university.csv")
setwd("~/Desktop/grad_school/spring_2024/stat-615/week_3")
library(tidyverse)
uni <- read_csv("../week_3/university.csv")
ggplot(uni, mapping = aes(x = act, y = gpa)) +
geom_point()
ggplot(uni, mapping = aes(x = act, y = gpa)) +
geom_point() +
geom_jitter()
uni_model <- lm(gpa ~ act, uni)
summary(uni_model)
newdf <- data.frame(new_act = c(31,18,5,29))
newdf
new_uni_model <- lm(gpa ~ new_act, newdf)
predict_uni <- function(x){
1.55870 + 0.05780 * x
}
predict_uni <- function(x){
1.55870 + 0.05780 * x
}
map_dbl(newdf, predict_uni)
predict_uni <- function(x){
1.55870 + 0.05780 * x
}
predict_uni(31)
predict_uni(18)
predict_uni(5)
predict_uni(29)
uni_model <- lm(gpa ~ act, uni)
summary(uni_model)
predict_uni(1)

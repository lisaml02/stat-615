---
title: "lecture_linear_algebra"
author: "lisa liubovich"
date: "2024-03-04"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Linear Algebra in R

You create matrices with the `matrix()` function.

```{r}
A <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 3, ncol = 2, byrow = TRUE)
A
```

-   Notice that the first column is populated first, then the second column, etc...

    -   adding byrow = TRUE makes it populate the rows first, which may be more conceptually clear

-   You can add/subtract/multiply/divide using a scalar with basic arithmetic operations.

```{r}
2 + A
```

```{r}
2 - A
```

```{r}
A - 2
```

```{r}
2 * A
```

```{r}
A/2
```

```{r}
2/A
```

Matrices can be element-wise added/sabtracted/multiplied/divided using `+`/`-`/`*`/`/` as long as these matrices are the same dimension.

```{r}
B <- matrix(c(7, 8, 9, 10, 11, 12), nrow = 3, ncol = 2, byrow = TRUE)
B
```

```{r}
A + B
```

```{r}
A - B
```

```{r}
A * B # element wise multiplication, not matrix multiplication
```

```{r}
A/B
```

Matrix multiplication is performed using `%*%`. The number of columns of the left matrix must equal the number of rows of the right matrix.

```{r}
C <- matrix(c(-1, 2, 1, 3), nrow = 2, ncol = 2, byrow = TRUE)
C
```

```{r}
A %*% C # possible because the number of rows in C is equal to the number of columns in A
# the resulting matrix is 3 x 2 because there are 3 rows in A and 2 columns in C
```

The transpose of a matrix is calculated using `t()`.

```{r}
t(A)
```

The inverse of a matrix is calculated using `solve()` (remember, has to be a square matrix).

```{r}
solve(C)
# can't do solve(A) because it isn't a square matrix, therefore it isn't possible

```

If the inverse did not exist, R would complain that the matrix is numerically/exactly singular.

Let's check to see that the inverse of C is really the inverse

```{r}
Cinv <- solve(C)
C %*% Cinv
```

(2,1) is R's way of saying 0, (1,1) is its way of saying 1 --\> diagonal matrix of 1's, so Cinv is the inverse of C

Example of a singular matrix:

```{r}
D <- matrix(c(1,2,2,4), nrow = 2, ncol = 2)
solve(D)
```

Singular means the inverse doesn't exist --\> the matrix is low rank, not full rank

You can create the identity matrix using `diag()`

```{r}
diag(x = 3)
```

You can create the matrix of ones by:

```{r}
matrix(1, nrow = 2, ncol = 3)
```

## **Exercise**: Suppose we have a response vector y and a design matrix X such that

7.8

9.0

y = 10.2

11.0

11.7

1 8

1 4

X = 1 0

1 -4

1 -8

Use matrix methods to derive the estimated regression coefficients of a regression of y on X. Verify these estimates using `lm()`.

```{r}
y <- c(7.8, 9.0, 10.2, 11.0, 11.7)
```

```{r}
X <- matrix(c(1, 8,
              1, 4,
              1, 0,
              1, -4,
              1, -8), ncol = 2, nrow = 5, byrow = TRUE)
X
y
```

```{r}
betahat = solve(t(X) %*% X) %*% t(X) %*% y
betahat
```

These are our coefficient estimates.

Verify using `lm()`:

```{r}
lm(y ~ X[, 2])
```

geom_bar()
install.packages("ggthemes")
library(ggthemes)
ggplot(data = midwest, mapping = aes(x = state)) +
geom_bar() +
scale_fill_colorblind()
ggplot(data = midwest, mapping = aes(x = state), fill = category) +
geom_bar()
ggplot(data = midwest, mapping = aes(x = state), fill = category) +
geom_bar() +
theme_classic()
ggplot(data = midwest, mapping = aes(x = state), fill = category) +
geom_bar() +
scale_fill_colorblind()
colors <- c("red", "orange", "yellow", "green", "blue")
ggplot(data = midwest, mapping = aes(x = state), fill = category) +
geom_bar() +
scale_fill_manual(colors)
# piping method
midwest %>%
filter(state %in% c("OH"))
library(dplyr)
# piping method
midwest %>%
filter(state %in% c("OH"))
# assignment method
ohio_data <- filter(midwest, state == "OH")
head(ohio_data)
midwest %>%
filter((state == "OH"),
popwhite > 50000,
popwhite < 90000)
midwest %>%
select(state:county, poptotal, popamerindian, percamerindan) %>%
arrange(desc(popamerindian)) %>%
slice_head(n = 20)
midwest %>%
filter((state == "MI"),
(poppovertyknown > 10000 & percprof > 10)) %>%
select(state:county, poppovertyknown, percprof)
midwest %>%
mutate(mean_poverty_pop = mean(poppovertyknown)) %>%
group_by(county) %>%
select(county:state, mean_poverty_pop)
ggplot(data = midwest, mapping = aes(x = poptotal, y = poppovertyknown)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
xlab("Total Population") +
ylab("Known Poverty Population") +
ggtitle("Relationship Between Total Population and Known Poverty Population")
ggplot(data = midwest, mapping = aes(x = state, y = percadultpoverty)) +
geom_boxplot() +
xlab("state") +
ylab("percadultpoverty")
ggplot(data = midwest, mapping = aes(x = percollege, y = percprof)) +
geom_point(color = "red") +
geom_smooth(se = FALSE, method = lm, color = "black") +
xlab("percollege") +
ylab("percprof") +
ggtitle("College/Professional Work Scatterplots") +
facet_wrap(.~state)
str(midwest)
# first method
midwest$poptotal
midwest %>%
group_by(state) %>%
summarize(mean_area = mean(area)) %>%
select(state, mean_area)
subset <- midwest["poptotal"]
print(subset)
midwest %>%
mutate(Ratio = popadults/poptotal) %>%
mutate(Percent = Ratio*100) %>%
select(state, county, poptotal, popadults, Ratio, Percent) %>%
filter(state == "WI") %>%
slice_head(n = 25)
ggplot(data = midwest, mapping = aes(x = area, y = state, fill = state)) +
geom_violin() +
ggtitle("Violin Plots (area vs state)")
colors <- c("red", "orange", "yellow", "green", "blue")
ggplot(data = midwest, mapping = aes(x = state), fill = category) +
geom_bar() +
scale_fill_manual(values = colors)
colors <- c("red", "orange", "yellow", "green", "blue")
ggplot(data = midwest, mapping = aes(x = state, fill = category)) +
geom_bar() +
scale_fill_manual(values = colors)
ggplot(data = midwest, mapping = aes(x = state, fill = category)) +
geom_bar() +
ggplot(data = midwest, mapping = aes(x = state, fill = category)) +
geom_bar()
ggplot(data = midwest, mapping = aes(x = state, fill = state)) +
geom_bar()
chooseCRANmirror(graphics=FALSE)
knitr::opts_chunk$set(echo = TRUE)
chooseCRANmirror(graphics=FALSE)
install.packages("tidyverse")
library(tidyverse)
install.packages("ggplot2")
library(ggplot2)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
options(repos = c(CRAN = "https://cran.r-project.org"))
knitr::opts_chunk$set(echo = TRUE)
n <- 54
k <- 22
p <- 1/6
cumulative_prob <- pbinom(21, size = n, prob = p)
p_value <- 1 - cumulative_prob
cat("p-value=", p_value)
n <- 400
k <- 125
p <- 0.25
p_value <- 1 - pbinom(k - 1, n, p)
cat("p-value=", p_value)
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyverse")
library(tidyverse)
install.packages("dplyr")
library(dplyr)
install.packages("ggplot2")
library(ggplot2)
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
install.packages("nycflight13")
library(nycflights13)
flights %>%
rowwise %>%
mutuate(total = sum(c_across)) # with rowwise, always use c across
install.packages("tidyverse")
library(tidyverse)
install.packages("dplyr")
library(dplyr)
install.packages("ggplot2")
library(ggplot2)
install.packages("nycflight13")
library(nycflights13)
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
flights %>%
rowwise %>%
mutuate(total = sum(c_across)) # with rowwise, always use c across
library(dplyr)
flights %>%
rowwise %>%
mutuate(total = sum(c_across)) # with rowwise, always use c across
flights %>%
rowwise %>%
mutate(total = sum(c_across)) # with rowwise, always use c across
library(nycflights13)
flights %>%
rowwise %>%
mutate(total = sum(c_across)) # with rowwise, always use c across
flights %>%
rowwise %>%
mutate(total = sum(c_across(where(is.numeric())))) # with rowwise, always use c across. for a logical vector, c_across finds where the output contains true and creates a column of trues
flights %>%
rowwise %>%
mutate(total = sum(c_across(where(is.numeric)))) # with rowwise, always use c across. for a logical vector, c_across finds where the output contains true and creates a column of trues
flights %>% transmute(total = rowSums(across(where(is.numeric))))
data(starwars)
View(starwars)
starwars %>%
mutate(total = max(c_across(where(is.numeric)))
starwars %>%
mutate(total = max(c_across(where(is.numeric))))
starwars %>%
mutate(total = max(c_across(where(is.numeric))), na.rm = TRUE)
starwars %>%
mutate(total = max(c_across(where(is.numeric), na.rm = TRUE)))
starwars %>%
mutate(total = max(c_across(where(is.numeric)), na.rm = TRUE))
flights %>%
rowwise() %>%
mutate(max_a = max(height, mass, birth_year, na.rm = TRUE))
starwars %>%
rowwise() %>%
mutate(max_a = max(height, mass, birth_year, na.rm = TRUE))
starwars %>%
rowwise() %>%
mutate(max_a = max(height, mass, birth_year, na.rm = TRUE)) %>%
ungroup() %>%  # you need to drop the grouping attribute once you're done with grouping, because rowwise is a grouping function
relocate(max_a) %>%
select(name, is.numeric) %>%
slice_max(max_a)
# across is a good way to have more efficient code
df %>%
group_by(g1, g2) %>%
summarise(a = mean(a), b = mean(b), c = mean(c), d = mean(d))
# across is a good way to have more efficient code. does the same operation across different columns.
# across(.col =    ,.fns = mean  ,.names), where fns is the function (or list of function) applied to each column and names is the name of the new columns, and mean is the chosen operation.
#df |>  summarize(across(c(col1), col2), list(mean, sd))) creates new column with mean of col1 and 2 and another new column sd of col1 and 2, leaving us with 4 columns total.
# if you add df |> group_by(g1, g2) %>% , adds more rows based on different combinations of the groups
#c_across only occurs with rowwise()
starwars %>%
summarize(across(where(is.numeric),
.fns = median),
groups = "drop")
starwars %>%
summarize(across(where(is.numeric),
.fns = median),
.groups = "drop")
starwars %>%
summarize(across(where(is.numeric),
.fns = median, na.rm = TRUE),
.groups = "drop")
starwars %>%
group_by(eye_color) %>%
summarize(across(where(is.numeric),
.fns = median, na.rm = TRUE),
.groups = "drop")
starwars %>%
group_by(eye_color, species) %>%
summarize(across(where(is.numeric),
.fns = median, na.rm = TRUE),
.groups = "drop")
starwars %>%
group_by(eye_color, species) %>% # starts with eye color, then performs the function based on species too
summarize(across(where(is.numeric),
.fns = list(mean,median), na.rm = TRUE),
.groups = "drop")
starwars %>%
summarize(across(where(is.numeric),
.fns = list(mean, median), na.rm = TRUE)
.groups = "drop")
starwars %>%
summarize(across(where(is.numeric),
.fns = list(mean, median), na.rm = TRUE),
.groups = "drop")
starwars %>%
summarise(across(where(is.numeric),
~ median(.x,na.rm = TRUE)),
.groups = "drop")
# summarize all rows
starwars %>%
summarise(across(where(is.character),
~ length(unique(.x)))) # summarizes across character columns and give me the levels (values) for each column. ie. for column eyecolor, there are 15 levels like blue, black, etc
starwars %>%
group_by(species) %>%
filter(n() > 1) %>% # each group that has more than 1 number of rows/observations
summarise(across(c(sex, gender, homeworld), # summarize across these columns
~ length(unique(.x))), # find number of levels
n=n()) # creating a new a column with number of rows
starwars %>%
group_by(homeworld) %>%
filter(n() > 1) %>% # only take groups that have more than one observation
summarise(across(where(is.numeric), # summarizes across numeric vectors only
~ max(.x, na.rm = TRUE)))   # computes the maximum
min_max <- list(
min = ~min(.x, na.rm = TRUE),
max = ~max(.x, na.rm = TRUE)
)
starwars %>% summarise(across(where(is.numeric), min_max))
# Create a rescale function
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE) # range takes the min and max of a vector
(x - rng[1]) / (rng[2] - rng[1])
}
# Create a sample tibble
df <- tibble(x = 1:4, y = rnorm(4))
df
# this goes beyond just mean and median
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyverse")
library(tidyverse)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
install.packages("nycflights13")
library(nycflights13)
flights %>%
mutate(total = sum(c_across(where(is.numeric))))
library(dplyr)
flights %>%
rowwise() %>%
mutate(total = sum(c_across(where(is.numeric))))
flights %>%
slice(1:100) %>%
rowwise() %>% # makes the code run much slower
mutate(total = sum(c_across(where(is.numeric))))
flights %>%
mutate(total = rowSums(where(is.numeric)))
flights %>%
mutate(total = rowSums(across(where(is.numeric))))
mpg %>%
summarise(across(cty, mean))
install.packages("mpg")
data(mpg)
library(mpg)
install.packages("ggplot2")
library(ggplot2)
data(mpg)
mpg %>%
summarise(across(cty, mean))
mpg %>%
summarise(across(cty, hwy, mean))
mpg %>%
summarise(across(c(cty, hwy) mean))
mpg %>%
summarise(across(c(cty, hwy), mean))
mpg %>%
summarise(across(c(cty, hwy), list(mean,sd))
mpg %>%
summarise(across(c(cty, hwy), list(mean,sd)))
mpg %>%
group_by(class) %>%
summarise(across(c(cty, hwy), list(mean,sd))) # creates two new columns with the mean and sd of columns cty and hwy
flights %>%
filter(busy_day <- mean(dep_delay) + sd(arr_delay))
flights %>%
filter(origin = "EWR") %>%
group_by(day) %>%
flights %>%
filter(origin = "EWR") %>%
group_by(day)
flights %>%
filter(origin == "EWR") %>%
group_by(day)
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
summarise(
across(
c(dep_delay, arr_delay),
.fns = list(
"busy day" = mean(dep_delay) + sd(arr_delay)
)
)
)
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(dep_delay, list("busy_day" = ~ mean(.x) + sd(.x))))
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ mean(.x) + sd(.x))))
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ mean(.x) + sd(.x)))))
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ mean(.x) + sd(.x)))).names = {.fn}, {.col})
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ mean(.x) + sd(.x))))
.names = {.fn}, {.col})
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ (mean(.x) + sd(.x)))
.names = "{.fn}, {.col}")
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ (mean(.x) + sd(.x))))
.names = "{.fn}, {.col}")
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ (mean(.x) + sd(.x)))),
.names = "{.fn}, {.col}")
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ (mean(.x) + sd(.x))))
"{.fn}, {.col}")
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ (mean(.x) + sd(.x)))
"{.fn}, {.col}")
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
mutate(summarise(across(
dep_delay, .fns = list("busy_day" = ~ (mean(.x) + sd(.x)), "{.fn} {.col}"))
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
summarise(across(
dep_delay, .fns = list("busy_day" = ~ (mean(.x) + sd(.x)), "{.fn} {.col}"))
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
summarise(across(
dep_delay, .fns = list("busy_day" = ~ (mean(.x) + sd(.x))))
flights %>%
filter(origin == "EWR") %>%
group_by(day) %>%
summarise(across(
dep_delay, .fns = list("busy_day" = ~ mean(.x) + sd(.x))))
flights %>%
filter(origin == "EWR", !is.na(dep_delay)) %>%
group_by(day) %>%
summarise(across(
dep_delay, .fns = list("busy_day" = ~ mean(.x) + sd(.x))))
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(orign,day) %>%
summarise(across(
dep_delay, .fns = list("busy_day" = ~ mean(.x) + sd(.x))))
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(origin,day) %>%
summarise(across(
dep_delay, .fns = list("busy_day" = ~ mean(.x) + sd(.x))))
flights %>%
filter(!is.na(dep_delay)) %>%
group_by(origin,day) %>%
summarise(across(
dep_delay, .fns = list("busy_day" = ~ mean(.x) + sd(.x)))) %>%
ungroup() %>%
ggplot(aes(day, dep_delay_busy_day, color = origin)) +
geom_line(size = 1)
install.packages("tidyverse")
library(tidyverse)
data(mpg)
knitr::opts_chunk$set(echo = TRUE)
pl <- ggplot(mpg, aes(x = hwy, y = cty)) +
geom_point()
# default path
ggsave(filename = "my_saved_plot_default_path.pdf", plot = pl)
# because we haven't specified any paths, the picture that we're saving is going to be saved where the qmd file is
pl <- ggplot(mpg, aes(x = hwy, y = cty)) +
geom_point()
# default path
ggsave(filename = "../pics/my_saved_plot_default_path.pdf", plot = pl)
pl <- ggplot(mpg, aes(x = hwy, y = cty)) +
geom_point()
# default path
ggsave(filename = "../pics/Data_612/my_saved_plot_default_path.pdf", plot = pl)
pl <- ggplot(mpg, aes(x = hwy, y = cty)) +
geom_point()
# default path
ggsave(filename = "../pics/Data_612/my_saved_plot_default_path.pdf", plot = pl)
pl <- ggplot(mpg, aes(x = hwy, y = cty)) +
geom_point()
# default path
ggsave(filename = "./pics/my_saved_plot_default_path.pdf", plot = pl)
pl <- ggplot(mpg, aes(x = hwy, y = cty)) +
geom_point()
# default path
ggsave(filename = "my_saved_plot_default_path.pdf", plot = pl)
# because we haven't specified any paths, the picture that we're saving is going to be saved where the qmd file is
# read_lines("address", n_max = 10) --> means read these first ten lines and see what kind of file you have
read_lines("../Data/viodata.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
cdi <- read_csv(file = "./week_1/cdi.csv")
setwd("~/Desktop/grad_school/spring_2024/stat-615/week_1")
cdi <- read_csv(file = "./week_1/cdi.csv")
cdi <- read_csv(file = "../week_1/cdi.csv")
cdi <- cdi %>%
mutate(log_capita_income = log(capita_income))
cdi <- cdi %>%
rename(population = pop)
View(cdi)
cdi %>%
filter(state = DE)
cdi %>%
filter(state == DE)
cdi %>%
filter(state == "DE")
cdi
cdi %>%
filter(state == "DE")
ggplot(cdi, mapping = aes(x = unemplotment, y = capita_income)) +
geom_line()
ggplot(cdi, mapping = aes(x = unemployment, y = capita_income)) +
geom_line()
ggplot(cdi, mapping = aes(x = unemployment, y = capita_income)) +
geom_histogram()
ggplot(cdi, mapping = aes(x = unemployment, y = capita_income)) +
geom_point()
ggplot(cdi, mapping = aes(x = unemployment, y = capita_income)) +
geom_point() +
geom_smooth(method = lm)
cdi <- read_csv(file = "https://dcgerard.github.io/stat_415_615/data/cdi.csv)
cdi <- read_csv(file = "https://dcgerard.github.io/stat_415_615/data/cdi.csv")
cdi <- cdi %>%
mutate(log_capita_income = log(capita_income))
cdi %>%
summarise(mean_area = mean(area),
sd_are = sd(area))
cdi <- cdi %>%
rename(population = pop)
cdi %>%
filter(state == "DE")
ggplot(cdi, mapping = aes(x = unemployment, y = capita_income)) +
geom_point() +
geom_smooth(method = lm)
ggplot(cdi, mapping = aes(x = region, y = capita_income)) +
geom_boxplot()
x <- seq(1, 100, by = 3)
sum(log(x))
log(sum(x))
